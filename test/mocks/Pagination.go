// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	dto "github.com/LuanTenorio/learn-api/internal/pagination/dto"
	mock "github.com/stretchr/testify/mock"
)

// Pagination is an autogenerated mock type for the Pagination type
type Pagination struct {
	mock.Mock
}

// Limit provides a mock function with no fields
func (_m *Pagination) Limit() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewResponse provides a mock function with given fields: data, tot
func (_m *Pagination) NewResponse(data interface{}, tot int) *dto.PaginationResponseDTO {
	ret := _m.Called(data, tot)

	if len(ret) == 0 {
		panic("no return value specified for NewResponse")
	}

	var r0 *dto.PaginationResponseDTO
	if rf, ok := ret.Get(0).(func(interface{}, int) *dto.PaginationResponseDTO); ok {
		r0 = rf(data, tot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PaginationResponseDTO)
		}
	}

	return r0
}

// Offset provides a mock function with no fields
func (_m *Pagination) Offset() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Offset")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Validate provides a mock function with no fields
func (_m *Pagination) Validate() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewPagination creates a new instance of Pagination. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPagination(t interface {
	mock.TestingT
	Cleanup(func())
}) *Pagination {
	mock := &Pagination{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
