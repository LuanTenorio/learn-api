// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/LuanTenorio/learn-api/internal/user/dto"
	entity "github.com/LuanTenorio/learn-api/internal/user/entity"

	exception "github.com/LuanTenorio/learn-api/internal/exception"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, userDto
func (_m *UserRepository) CreateUser(ctx context.Context, userDto *dto.CreateUserDTO) (*entity.User, exception.Exception) {
	ret := _m.Called(ctx, userDto)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *entity.User
	var r1 exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateUserDTO) (*entity.User, exception.Exception)); ok {
		return rf(ctx, userDto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateUserDTO) *entity.User); ok {
		r0 = rf(ctx, userDto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateUserDTO) exception.Exception); ok {
		r1 = rf(ctx, userDto)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(exception.Exception)
		}
	}

	return r0, r1
}

// FindUserAndPwdByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) FindUserAndPwdByEmail(ctx context.Context, email string) (*dto.UserWithPwdDTO, exception.Exception) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserAndPwdByEmail")
	}

	var r0 *dto.UserWithPwdDTO
	var r1 exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.UserWithPwdDTO, exception.Exception)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.UserWithPwdDTO); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserWithPwdDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) exception.Exception); ok {
		r1 = rf(ctx, email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(exception.Exception)
		}
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
