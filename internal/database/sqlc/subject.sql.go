// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subject.sql

package sqlc

import (
	"context"
)

const createSubject = `-- name: CreateSubject :one
INSERT INTO subjects (name, total_time, avarage, user_id) VALUES ($1, 0, 0, $2) RETURNING id, name, total_time, avarage, user_id, created_at
`

type CreateSubjectParams struct {
	Name   string
	UserID int32
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (Subject, error) {
	row := q.db.QueryRow(ctx, createSubject, arg.Name, arg.UserID)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TotalTime,
		&i.Avarage,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const findSubjectByIdAndName = `-- name: FindSubjectByIdAndName :one
SELECT id FROM subjects WHERE name=$1 and user_id=$2 LIMIT 1
`

type FindSubjectByIdAndNameParams struct {
	Name   string
	UserID int32
}

func (q *Queries) FindSubjectByIdAndName(ctx context.Context, arg FindSubjectByIdAndNameParams) (int32, error) {
	row := q.db.QueryRow(ctx, findSubjectByIdAndName, arg.Name, arg.UserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listSubjects = `-- name: ListSubjects :many
SELECT id, name, total_time, avarage, user_id, created_at FROM subjects WHERE user_id = $1 LIMIT $2 OFFSET $3
`

type ListSubjectsParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

func (q *Queries) ListSubjects(ctx context.Context, arg ListSubjectsParams) ([]Subject, error) {
	rows, err := q.db.Query(ctx, listSubjects, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TotalTime,
			&i.Avarage,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalSubjectsByUser = `-- name: TotalSubjectsByUser :one
SELECT COUNT(id) AS total FROM subjects WHERE user_id = $1 LIMIT 1
`

func (q *Queries) TotalSubjectsByUser(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, totalSubjectsByUser, userID)
	var total int64
	err := row.Scan(&total)
	return total, err
}
